% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fun_do_design_composite_switch.R
\name{do_design_composite_switch}
\alias{do_design_composite_switch}
\title{do_design_composite_switch}
\usage{
do_design_composite_switch(algo_0, algo_1, ...)
}
\arguments{
\item{algo_0}{A component algorithm to be switched to when e == 0 (algo_base)}

\item{algo_1}{A component algorithm to be switched to when e == 1 (algo_base)}

\item{...}{For future usage}
}
\value{
A component algorithm whose inner logic switches algo_0 and algo_1 based on e
}
\description{
Definition: A composite switch, in this context, is a composite algorithm c1 composed of 2 component algorithms: c2 and c3.
c1, c2 and c3 have identical output dimensions.
c2 and c3 have identical input dimensions.
c1 has input dimension of c2's or c3's input dimension + 1, the "extra bit" e.
The composite switch algorithm functions in the following manner:
1). it receives the normal c2 or c3 input + the extra bit e.
2). if e == 0, it runs c2 and returns its output.
3). if e == 1, it runs c3 and returns its output.
In summary, a composite switch is a practical construction that combines two algorithms and switch their execution with an extra bit.
}
\examples{
# Switch two simple algos:
require(haricot);
algo_0 <- algo_01$new();
algo_0$plot();
algo_1 <- algo_10$new();
algo_1$plot();
algo_switch <- do_design_composite_switch(algo_0, algo_1);
algo_switch$do_execute("00");
algo_switch$do_execute("10");
algo_switch$do_execute("01");
algo_switch$do_execute("11");
algo_switch$plot();

}
